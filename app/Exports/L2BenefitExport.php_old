<?php

namespace App\Exports;

use App\Models\Farmer;
use App\Models\BenefitDataValidation;
use App\Models\FarmerBenefit;
use App\Models\FarmerBenefitImage;
use App\Models\FarmerCropdata;
use App\Models\Benefit;
use App\Exports\FarmerExport;
use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\ShouldAutoSize;
use Maatwebsite\Excel\Concerns\WithMapping;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Events\AfterSheet;
use Maatwebsite\Excel\Concerns\WithStyles;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;
use DB;
use Maatwebsite\Excel\Concerns\WithChunkReading;

class L2BenefitExport implements FromCollection, WithHeadings, WithMapping, ShouldAutoSize, WithEvents, WithStyles, WithChunkReading
{
    protected $farmeruniqueid;
    protected $farmer_id;
    function __construct($farmeruniqueid, $request)
    {
        $this->farmeruniqueid = $farmeruniqueid;
        $this->request = $request;
    }

    /**
     * @return \Illuminate\Support\Collection
     */
    public function collection()
    {
        // dd('in');
        // $request = json_decode($this->request);//whil development use this
        $request = $this->request; //in production use this
        $farmer = FarmerBenefit::where('status', 'Approved')->whereHas('farmerapproved', function ($q) use ($request) {
            $q->where('onboarding_form', 1);
            $q->where('final_status_onboarding', 'Approved');
            if (isset($request->state)  && $request->state) {
                $q->where('state_id', 'like', $request->state);
            }
            if (isset($request->district)  && $request->district) {
                $q->where('district_id', 'like', $request->district);
            }
            if (isset($request->taluka)  && $request->taluka) {
                $q->where('taluka_id', 'like', $request->taluka);
            }
            if (isset($request->panchayats)  && $request->panchayats) {
                $q->where('panchayat_id', 'like', $request->panchayats);
            }
            if (isset($request->village)  && $request->village) {
                $q->where('village_id', 'like', $request->village);
            }

            return $q;
        })
            ->with('farmerapproved')
            ->when($request, function ($w) use ($request) {
                if (isset($request->executive_onboarding)  && $request->executive_onboarding) {
                    $w->where('surveyor_id', $request->executive_onboarding);
                }
                if (isset($request->start_date)  && $request->start_date) {
                    $w->whereDate('created_at', '>=', $request->start_date);
                }
                if (isset($request->end_date)  && $request->end_date) {
                    $w->whereDate('created_at', '<=', $request->end_date);
                }
                if (isset($request->status)  && $request->status) {
                    $w->where('l2_status', $request->status);
                }
                if (isset($request->rolename)  && $request->rolename != 'SuperAdmin' && $request->status != 'Pending') {
                    $w->where('l2_apprv_reject_user_id', $request->userid);
                }
                if (isset($request->l2_validator)  && $request->l2_validator) {
                    $w->where('l2_apprv_reject_user_id', 'like', $request->l2_validator);
                }
                return $w;
            })->get();
            // dd($farmer);
        return $farmer;
    }

    // here you select the row that you want in the file
    public function map($farmer): array
    {
        $payload_fields = [
            $farmer->farmerapproved->farmer_uniqueId ?? "-", $farmer->farmerapproved->farmer_name ?? "-", $farmer->farmerapproved->mobile_access ?? "-",
            $farmer->farmerapproved->mobile_reln_owner ?? "-", $farmer->farmerapproved->mobile ?? "-", $farmer->farmerapproved->state ?? "-",
            $farmer->benefit ?? "-", $farmer->seasons ?? "-", $farmer->date_survey ?? "-", $farmer->surveyor_name ?? "-", $farmer->surveyor_mobile ?? "-",
        ];
        $validation = BenefitDataValidation::where('farmer_uniqueId', $farmer->farmer_uniqueId)->where('level', 'L-2-Validator')->latest()->first();
        array_push($payload_fields, $validation->status ?? "Pending", $validation->timestamp ?? "-", $validation->ValidatorUserDetail->name ?? "-");
        return $payload_fields;
    }

    public function headings(): array
    {
        $header = [
            'Farmer UniqueID', 'Farmer Name', 'Mobile Access', 'Mobile Relation Owner', 'Mobile', 'State', 'Benefit',
            'Seasons', 'DateSurvey', 'Surveyor Name', 'Surveyor Mobile', 'L2 Plotstatus', 'L2 Plotstatus DateTime', 'L2 Validator Name'
        ];
        return $header;
    }

    /**
     * Write code on Method
     *
     * @return response()
     */
    public function registerEvents(): array
    {
        return [
            AfterSheet::class    => function (AfterSheet $event) {
                $cellRange = 'A1:AJ1'; // All headers
                $event->sheet->getDelegate()->getStyle($cellRange)->getFont()->setSize(11);
            },
        ];
    }

    public function styles(Worksheet $sheet)
    {
        return [
            // Style the first row as bold text.
            1    => ['font' => ['bold' => true]],
        ];
    }

    public function chunkSize(): int
    {
        return 100;
    }
}
